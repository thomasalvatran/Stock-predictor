# 0. Import th∆∞ vi·ªán
import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# 1. Nh·∫≠p m√£ c·ªï phi·∫øu v√† c·∫•u h√¨nh API
API_KEY = '51F4ZU2HRHY6XXXX'  # üîë Thay b·∫±ng API key th·∫≠t c·ªßa b·∫°n n·∫øu c·∫ßn using https://www.alphavantage.co/support/#api-key this version has value for dash red line
symbol = input("üì• Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª• TSLA, AAPL, MSFT): ").upper()
url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&outputsize=compact&apikey={API_KEY}'

# 2. T·∫£i d·ªØ li·ªáu t·ª´ API
print(f"üì° ƒêang t·∫£i d·ªØ li·ªáu cho {symbol}...")
try:
    response = requests.get(url, timeout=10)
    data = response.json()
except Exception as e:
    print(f"‚ùå K·∫øt n·ªëi th·∫•t b·∫°i: {e}")
    exit()

# 3. Ki·ªÉm tra ph·∫£n h·ªìi API
if "Time Series (Daily)" not in data:
    print("‚ùå L·ªói API ho·∫∑c ƒë√£ v∆∞·ª£t gi·ªõi h·∫°n truy c·∫≠p.")
    print("üîé Ph·∫£n h·ªìi t·ª´ server:", data)
    exit()

# 4. Chuy·ªÉn d·ªØ li·ªáu th√†nh DataFrame
df = pd.DataFrame(data['Time Series (Daily)']).T
df = df.astype(float)
df = df[['4. close']]
df.columns = ['Close']
df = df.sort_index()  # S·∫Øp x·∫øp theo th·ªùi gian tƒÉng d·∫ßn

# 5. Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['Close']])

X = []
y = []
window_size = 10  # S·ªë ng√†y d√πng ƒë·ªÉ d·ª± ƒëo√°n

for i in range(window_size, len(scaled_data)):
    X.append(scaled_data[i - window_size:i, 0])
    y.append(scaled_data[i, 0])

X = np.array(X)
y = np.array(y)
X = X.reshape((X.shape[0], X.shape[1], 1))  # Reshape cho LSTM

# 6. X√¢y d·ª±ng m√¥ h√¨nh LSTM
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=30, batch_size=8, verbose=0)

# 7. D·ª± ƒëo√°n gi√° ng√†y mai
last_10 = scaled_data[-window_size:]
last_10 = last_10.reshape((1, window_size, 1))
predicted_scaled = model.predict(last_10)
predicted_price = scaler.inverse_transform(predicted_scaled)[0][0]

# 8. In k·∫øt qu·∫£
today_price = df['Close'].iloc[-1]
print(f"\n‚úÖ M√£: {symbol}")
print(f"‚úÖ Gi√° h√¥m nay: ${today_price:.2f}")
print(f"üîÆ D·ª± ƒëo√°n ng√†y mai: ${predicted_price:.2f}")

# 9. V·∫Ω bi·ªÉu ƒë·ªì
plt.figure(figsize=(12, 6))
plt.plot(df['Close'].values, label="Gi√° th·ª±c t·∫ø")
plt.axhline(predicted_price, color='red', linestyle='--', label="Gi√° d·ª± ƒëo√°n ng√†y mai")
plt.text(len(df) - 1, predicted_price, f"${predicted_price:.2f}", color='red', va='bottom', ha='right', fontsize=10)

plt.title(f"D·ª± ƒëo√°n gi√° c·ªï phi·∫øu {symbol}")
plt.xlabel("Th·ªùi gian")
plt.ylabel("Gi√° USD")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
