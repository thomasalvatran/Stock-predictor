import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# Nhập mã cổ phiếu
symbol = input("📥 Nhập mã cổ phiếu (ví dụ TSLA, AAPL, MSFT): ").upper()

# Tải dữ liệu từ Yahoo Finance
df = yf.download(symbol, start="2010-01-01", end="2023-12-31")

# Kiểm tra dữ liệu đã tải xuống
if df.empty:
    print(f"❌ Không có dữ liệu cho mã cổ phiếu {symbol}. Vui lòng thử lại sau.")
else:
    # 1. Tiền xử lý dữ liệu và tạo các chỉ báo kỹ thuật
    df['MA30'] = df['Close'].rolling(window=30).mean()  # Moving Average 30 ngày
    df['RSI'] = 100 - (100 / (1 + (df['Close'].diff(1).where(df['Close'].diff(1) > 0, 0).rolling(window=14).mean() / 
                               df['Close'].diff(1).where(df['Close'].diff(1) < 0, 0).rolling(window=14).mean())))
    df = df.dropna()

    # 2. Sử dụng dữ liệu 'Close', 'MA30' và 'RSI' làm tính năng đầu vào
    features = ['Close', 'MA30', 'RSI']
    df_features = df[features]

    # Chuẩn hóa dữ liệu
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(df_features)

    # Tạo dữ liệu cho mô hình
    X = []
    y = []
    window_size = 60  # Sử dụng cửa sổ 60 ngày

    for i in range(window_size, len(scaled_data)):
        X.append(scaled_data[i - window_size:i])
        y.append(scaled_data[i, 0])  # Dự đoán giá 'Close'

    X = np.array(X)
    y = np.array(y)

    # Reshape cho LSTM
    X = X.reshape((X.shape[0], X.shape[1], X.shape[2]))

    # 3. Xây dựng mô hình LSTM
    model = Sequential()
    model.add(LSTM(units=100, return_sequences=True, input_shape=(X.shape[1], X.shape[2])))
    model.add(LSTM(units=100))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')

    # 4. Huấn luyện mô hình
    model.fit(X, y, epochs=50, batch_size=32, verbose=1)

    # 5. Dự đoán giá ngày mai
    last_60 = scaled_data[-window_size:]  # Lấy 60 ngày cuối cùng
    last_60 = last_60.reshape((1, window_size, X.shape[2]))
    predicted_scaled = model.predict(last_60)
    predicted_price = scaler.inverse_transform(np.hstack((predicted_scaled, np.zeros((predicted_scaled.shape[0], 2)))))[:, 0][0]

    # 6. Kết quả
    today_price = df['Close'].iloc[-1]
    print(f"\n✅ Mã: {symbol}")
    print(f"✅ Giá hôm nay: ${today_price:.2f}")
    print(f"🔮 Dự đoán ngày mai: ${predicted_price:.2f}")

    # 7. Vẽ đồ thị giá đóng cửa và dự đoán
    plt.plot(df['Close'], label="Giá thực tế")
    plt.axhline(predicted_price, color='red', linestyle='--', label="Dự đoán ngày mai")
    plt.title(f"Dự đoán giá cổ phiếu {symbol}")
    plt.legend()
    plt.grid(True)
    plt.show()

# ERROR:yfinance:['AAPL']: YFRateLimitError('Too Many Requests. Rate limited. Try after a while.')
# ❌ Không có dữ liệu cho mã cổ phiếu AAPL. Vui lòng thử lại sau.
